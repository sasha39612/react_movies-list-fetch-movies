{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","getMovieFromServer","a","fetch","response","json","FindMovie","addMovie","useState","setTitle","previewMovie","setMovie","nameError","setnameError","errorState","seterrorState","resetForm","htmlFor","type","id","placeholder","classNames","name","value","onChange","event","target","autoComplete","onClick","then","Response","newMovie","Title","Plot","Poster","imdbID","movieCheck","some","localeCompare","isMovieTitle","undefined","App","data","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cc01e6e.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string,\n  imdbUrl: PropTypes.string,\n};\n\nMovieCard.defaultProps = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com/';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n\nexport const getMovieFromServer = async(title) => {\n  const response\n    = await fetch(`${BASE_URL}?apikey=70273a11&t=${title}`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovieFromServer } from '../../api/api';\n\nexport const FindMovie = ({ movies, addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [previewMovie, setMovie] = useState({});\n  const [nameError, setnameError] = useState();\n  const [errorState, seterrorState] = useState(false);\n\n  const handleChange = (event) => {\n    setTitle(event.target.value);\n    seterrorState(false);\n  };\n\n  const handleChangeMovie = () => {\n    getMovieFromServer(title)\n      .then((movie) => {\n        if (movie.Response === 'False') {\n          seterrorState(true);\n          setnameError('Can\\'t find a movie with such a title');\n          setMovie({});\n\n          return;\n        }\n\n        const newMovie = {\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster,\n          imdbUrl: `http://www.omdbapi.com/?apikey=70273a11&t\n            =${movie.imdbID}`,\n          imdbId: movie.imdbID,\n        };\n\n        setMovie(newMovie);\n        seterrorState(false);\n        setTitle();\n      });\n  };\n\n  const handleSubmit = () => {\n    const movieCheck = movies\n      .some(movie => movie.imdbId\n        .localeCompare(previewMovie.imdbId) === 0);\n\n    const isMovieTitle = !(previewMovie.title === undefined);\n\n    if (!movieCheck && isMovieTitle) {\n      addMovie(previewMovie);\n    }\n\n    if (movieCheck) {\n      setnameError('The movie is already on the list');\n      seterrorState(true);\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setTitle();\n    setMovie({});\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': errorState })}\n              name=\"title\"\n              value={title || ''}\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n\n          {errorState && (\n            <p className=\"help is-danger\">\n              {nameError}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={handleChangeMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleSubmit}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {!(previewMovie.title === undefined) && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...previewMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovie] = useState(data);\n\n  const addMovie = (movie) => {\n    setMovie(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}